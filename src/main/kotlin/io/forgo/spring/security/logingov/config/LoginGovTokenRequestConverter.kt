package io.forgo.spring.security.logingov.config

import com.auth0.jwt.JWT
import com.auth0.jwt.algorithms.Algorithm
import io.forgo.spring.security.logingov.constants.LOGIN_GOV_CLIENT_ASSERTION_TYPE
import io.forgo.spring.security.logingov.constants.LOGIN_GOV_REGISTRATION_ID
import io.forgo.spring.security.logingov.constants.LOGIN_GOV_TOKEN_EXPIRATION_TIME
import org.springframework.http.HttpMethod
import org.springframework.http.RequestEntity
import org.springframework.security.oauth2.client.endpoint.OAuth2AuthorizationCodeGrantRequest
import org.springframework.security.oauth2.client.endpoint.OAuth2AuthorizationCodeGrantRequestEntityConverter
import org.springframework.security.oauth2.client.registration.ClientRegistrationRepository
import org.springframework.security.oauth2.core.endpoint.OAuth2ParameterNames
import org.springframework.util.MultiValueMap
import java.util.*

class LoginGovTokenRequestConverter(clientRegistrationRepository: ClientRegistrationRepository, keystoreUtil: KeystoreUtil) : OAuth2AuthorizationCodeGrantRequestEntityConverter() {

    open val clientRegistrationRepository = clientRegistrationRepository
    open val keystoreUtil = keystoreUtil

    override fun convert(authorizationCodeGrantRequest: OAuth2AuthorizationCodeGrantRequest): RequestEntity<*>? {

        val originalRequestEntity = super.convert(authorizationCodeGrantRequest)

        val registrationId: String = this.resolveRegistrationId(authorizationCodeGrantRequest)
        if(registrationId == LOGIN_GOV_REGISTRATION_ID) {
            val clientRegistration = clientRegistrationRepository.findByRegistrationId(registrationId)
            val clientId: String = clientRegistration.clientId
            val clientSecret: String = clientRegistration.clientSecret
            val tokenUri: String = clientRegistration.providerDetails.tokenUri
            val expirationTime: Long = LOGIN_GOV_TOKEN_EXPIRATION_TIME

            val jwt: String = JWT.create()
                    .withSubject(clientId)
                    .withIssuer(clientId)
                    .withAudience(tokenUri)
                    // Should be an un-guessable, random string generated by the client.
                    .withJWTId(UUID.randomUUID().toString())
                    .withExpiresAt(Date(System.currentTimeMillis() + expirationTime))
                    .sign(Algorithm.RSA256(keystoreUtil.rsaPublicKey(),keystoreUtil.rsaPrivateKey()))
//                    .sign(Algorithm.HMAC512(clientSecret.toByteArray()))


            val headers = originalRequestEntity?.headers
            @Suppress("UNCHECKED_CAST")
            val formParameters: MultiValueMap<String, String> = originalRequestEntity?.body as MultiValueMap<String, String>
            val uri = originalRequestEntity.url

            formParameters.add("client_assertion", jwt)
            formParameters.add("client_assertion_type", LOGIN_GOV_CLIENT_ASSERTION_TYPE)
            return RequestEntity(formParameters, headers, HttpMethod.POST, uri)
        }
        else {
            return originalRequestEntity
        }
    }

    private fun resolveRegistrationId(authorizationCodeGrantRequest: OAuth2AuthorizationCodeGrantRequest?): String {
        return authorizationCodeGrantRequest?.authorizationExchange?.authorizationRequest!!.additionalParameters[OAuth2ParameterNames.REGISTRATION_ID] as String
    }
}